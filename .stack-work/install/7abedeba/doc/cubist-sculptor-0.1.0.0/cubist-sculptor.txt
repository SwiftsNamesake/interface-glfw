-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see README.md
@package cubist-sculptor
@version 0.1.0.0


module Geometry.Sculptor.Shapes

-- | A <a>Face</a> is a list of vertices TODO: Polymorphic container TODO:
--   Make sure all vertices lie in the same plane (using Triangles?)
data Face v
Face :: [v] -> Face v
data Edge v
Edge :: v -> v -> Edge v

-- | A simple list of vertices
vlist :: a -> a -> a -> [a]

-- | Tessellate a polygon with triangles. Presently, only concave shapes
--   will tessellate properly. TODO: Make it work for any shape (convex and
--   concave) TODO: Opposite rather than adjacent sides (don't include
--   centre)
triangles :: [a] -> [[a]]

-- | Create a point that lies on the XY plane
xy :: Fractional f => (f -> f -> f -> a) -> f -> f -> a

-- | Create a point that lies on the XZ plane
xz :: Fractional f => (f -> f -> f -> a) -> f -> f -> a

-- | Create a point that lies on the YZ plane
yz :: Fractional f => (f -> f -> f -> a) -> f -> f -> a

-- | Generate the vertices for a rectangular plane, centred at (0,0,0)
--   TODO: Rename (eg. <tt>rectangle</tt>) (?)
--   
--   Assuming the plane is parallel to the X and Y axes, the vertices are
--   given in a clockwise order, starting from the top left corner (eg. top
--   left, top right, bottom right, bottom left).
plane :: Fractional f => (f -> f -> a) -> f -> f -> [a]

-- | Generate the vertices for a rectangular plane, parallel with the X and
--   Y axes and centred at (0,0,0)
planeXY :: Fractional f => (f -> f -> f -> a) -> f -> f -> [a]

-- | Generate the vertices for a rectangular plane, parallel with the X and
--   Z axes and centred at (0,0,0)
planeXZ :: Fractional f => (f -> f -> f -> a) -> f -> f -> [a]

-- | Generate the vertices for a rectangular plane, parallel with the Y and
--   Z axes and centred at (0,0,0)
planeYZ :: Fractional f => (f -> f -> f -> a) -> f -> f -> [a]

-- | Generate the vertices for a regular polygon, centred at (0,0,0)
polygon :: (Floating f, Integral i) => (f -> f -> a) -> i -> f -> [a]

-- | lattice ::
--   
--   Generate the vertices of an axis-aligned cuboid centred at (0,0,0)
--   TODO: Use combinatorics to generate vertices (?) TODO: Specify order
--   and winding somehow
cuboid :: Fractional f => (f -> f -> f -> a) -> f -> f -> f -> [a]

-- | Generate the vertices of an axis-aligned cube centred at (0,0,0)
cube :: Fractional f => (f -> f -> f -> a) -> f -> [a]

-- | left, right, bottom, top, back, front V3 top left bottom
--   
--   Indices for a solid cuboid (with triangulated sides, cf.
--   <a>cuboid</a>) TODO: Use more sensible container types (three levels
--   of lists seems a bit excessive...) TODO: Allow any kind of
--   tessellation (?)
cuboidIndices :: Integral i => [[[i]]]
cuboidLineIndices :: Integral i => [(i, i)]
